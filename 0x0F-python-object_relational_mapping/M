#!/bin/bash

cat <<EOF > 7-model_state_fetch_all.py
#!/usr/bin/python3
"""
lists all 'State' objects from the 'hbtn_0e_6_usa' database
"""
from sys import argv
from model_state import Base, State
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

if __name__ == "__main__":
    """
    access to the database and get the states from the database
    """
    database_url = 'mysql+mysqldb://{}:{}@localhost:3306/{}'.format(
        argv[1], argv[2], argv[3])
    engine = create_engine(database_url)
    Session = sessionmaker(bind=engine)
    session = Session()
    for si in session.query(State).order_by(State.id):
        print('{0}: {1}'.format(si.id, si.name))
EOF


cat <<EOF > 8-model_state_fetch_first.py
#!/usr/bin/python3
"""
prints the first 'State' object from the 'hbtn_0e_6_usa' database
"""

from sys import argv
from model_state import Base, State
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

if __name__ == "__main__":
    """
    access to the database and get the states from the database
    """
    database_url = 'mysql+mysqldb://{}:{}@localhost:3306/{}'.format(
        argv[1], argv[2], argv[3])
    engine = create_engine(database_url)
    Session = sessionmaker(bind=engine)

    session = Session()
    si = session.query(State).order_by(State.id).first()
    if si is None:
        print('Nothing')
    else:
        print('{0}: {1}'.format(si.id, si.name))
EOF
cat <<EOF > 9-model_state_filter_a.py
#!/usr/bin/python3
"""
lists all 'State' objects that contain the letter 'a'
from the 'hbtn_0e_6_usa' database
"""

from sys import argv
from model_state import Base, State
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

if __name__ == "__main__":
    """
    access to the database and get the states from the database
    """
    database_url = 'mysql+mysqldb://{}:{}@localhost:3306/{}'.format(
        argv[1], argv[2], argv[3])
    engine = create_engine(database_url)
    Session = sessionmaker(bind=engine)
    session = Session()
    for si in session.query(State).filter(State.name.contains('a')):
        print('{0}: {1}'.format(si.id, si.name))
EOF


cat <<EOF > 10-model_state_my_get.py
#!/usr/bin/python3
"""
prints the 'State' object id, with the name passed as argument
from the 'hbtn_0e_6_usa' database
"""
from sys import argv
from model_state import Base, State
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

if __name__ == "__main__":
    """
    access to the database and get the states from the database
    """
    database_url = 'mysql+mysqldb://{}:{}@localhost:3306/{}'.format(
        argv[1], argv[2], argv[3])
    engine = create_engine(database_url)
    Session = sessionmaker(bind=engine)
    session = Session()
    si = session.query(State).filter(State.name == argv[4]).first()
    if si is None:
        print('Not found')
    else:
        print('{0}'.format(si.id))
EOF
cat <<EOF > 11-model_state_insert.py
#!/usr/bin/python3
"""
adds the State object 'Louisiana' to the 'hbtn_0e_6_usa' database
"""
from sys import argv
from model_state import Base, State
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

if __name__ == "__main__":
    """
    access to the database and get the states from the database
    """
    database_url = 'mysql+mysqldb://{}:{}@localhost:3306/{}'.format(
        argv[1], argv[2], argv[3])
    engine = create_engine(database_url)
    Session = sessionmaker(bind=engine)
    session = Session()
    lou_state = State(name='Louisiana')
    session.add(lou_state)
    session.commit()
    print('{0}'.format(lou_state.id))
    session.close()
EOF


cat <<EOF > 12-model_state_update_id_2.py
#!/usr/bin/python3
"""
changes the name of a 'State' object from the database 'hbtn_0e_6_usa'
"""
from sys import argv
from model_state import Base, State
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

if __name__ == "__main__":
    """
    updates a 'State' object on the database
    """
    database_url = 'mysql+mysqldb://{}:{}@localhost:3306/{}'.format(
        argv[1], argv[2], argv[3])
    engine = create_engine(database_url)
    Session = sessionmaker(bind=engine)
    session = Session()
    ari_state = session.query(State).filter(State.id == '2').first()
    ari_state.name = 'New Mexico'
    session.commit()
    session.close()
EOF

cat <<EOF > 13-model_state_delete_a.py
#!/usr/bin/python3
"""
deletes all State objects with a name containing the letter 'a'
from the 'hbtn_0e_6_usa' database
"""
import sys
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from model_state import State

if __name__ == "__main__":
    engine = create_engine("mysql+mysqldb://{}:{}@localhost/{}"
                           .format(sys.argv[1], sys.argv[2], sys.argv[3]))
    Session = sessionmaker(bind=engine)
    session = Session()
    for state in session.query(State):
        if "a" in state.name:
            session.delete(state)
    session.commit()
EOF

pycodestyle ./*.py
